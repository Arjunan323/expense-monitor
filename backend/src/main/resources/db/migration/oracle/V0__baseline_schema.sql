-- Oracle compatible baseline schema (initial creation only)
-- NOTE: Oracle has no BOOLEAN type; use NUMBER(1) with 0/1 semantics.
-- Identity columns used (Oracle 12c+). If targeting older versions, replace with sequences + triggers.

CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(150) NOT NULL,
    password VARCHAR2(255) NOT NULL,
    email VARCHAR2(255),
    first_name VARCHAR2(255),
    last_name VARCHAR2(255),
    currency VARCHAR2(10) DEFAULT 'USD',
    locale VARCHAR2(20) DEFAULT 'en-US',
    subscribed NUMBER(1) DEFAULT 0 NOT NULL,
    CONSTRAINT uq_users_username UNIQUE (username),
    CONSTRAINT uq_users_email UNIQUE (email),
    CONSTRAINT ck_users_subscribed CHECK (subscribed IN (0,1))
);

CREATE TABLE subscriptions (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    plan_type VARCHAR2(30),
    start_date TIMESTAMP,
    end_date TIMESTAMP,
    status VARCHAR2(30),
    razorpay_payment_id VARCHAR2(255),
    razorpay_order_id VARCHAR2(255),
    user_id NUMBER UNIQUE,
    CONSTRAINT fk_subscriptions_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE raw_statements (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER,
    upload_date TIMESTAMP,
    filename VARCHAR2(500),
    raw_json CLOB,
    bank_name VARCHAR2(100),
    page_count NUMBER,
    CONSTRAINT fk_raw_statements_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE transactions (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER,
    date DATE,
    description CLOB,
    amount NUMBER(19,4),
    balance NUMBER(19,4),
    category VARCHAR2(150),
    bank_name VARCHAR2(100),
    txn_hash VARCHAR2(64),
    CONSTRAINT fk_transactions_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE INDEX idx_transactions_txn_hash ON transactions(txn_hash);

CREATE OR REPLACE TRIGGER trg_transactions_txn_hash_uniq
BEFORE INSERT OR UPDATE OF txn_hash ON transactions
FOR EACH ROW
WHEN (NEW.txn_hash IS NOT NULL)
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(1) INTO v_count FROM transactions
    WHERE user_id = :NEW.user_id AND txn_hash = :NEW.txn_hash AND ( :OLD.id IS NULL OR id != :OLD.id );
    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Duplicate transaction hash for user');
    END IF;
END;
/

CREATE TABLE plans (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    plan_type VARCHAR2(50) NOT NULL,
    region VARCHAR2(10) DEFAULT 'GLOBAL',
    currency VARCHAR2(10) NULL,
    amount NUMBER(10,2) DEFAULT 0 NOT NULL,
    statements_per_month NUMBER(5) DEFAULT 0 NOT NULL,
    pages_per_statement NUMBER(5) DEFAULT 0 NOT NULL,
    features CLOB,
    combined_bank NUMBER(5),
    CONSTRAINT uq_plan_type_region UNIQUE (plan_type, region)
);

CREATE TABLE feedback (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR2(255),
    message CLOB NOT NULL,
    type VARCHAR2(50),
    meta VARCHAR2(2000),
    created_at TIMESTAMP
);

CREATE TABLE banks (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(150) NOT NULL,
    user_id NUMBER NOT NULL,
    transaction_count NUMBER DEFAULT 0 NOT NULL,
    CONSTRAINT fk_banks_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT uq_banks_user_name UNIQUE (user_id, name)
);

CREATE TABLE categories (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(150) NOT NULL,
    user_id NUMBER NOT NULL,
    transaction_count NUMBER DEFAULT 0 NOT NULL,
    CONSTRAINT fk_categories_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT uq_categories_user_name UNIQUE (user_id, name)
);

-- Outbox events (for future event-driven integrations)
CREATE TABLE outbox_events (
    id VARCHAR2(36) PRIMARY KEY,
    aggregate_type VARCHAR2(64) NOT NULL,
    aggregate_id VARCHAR2(64) NOT NULL,
    event_type VARCHAR2(96) NOT NULL,
    payload CLOB NOT NULL,
    status VARCHAR2(16) NOT NULL,
    created_at TIMESTAMP NOT NULL,
    last_attempt_at TIMESTAMP NULL,
    attempt_count NUMBER NULL
);
CREATE INDEX idx_outbox_status_created ON outbox_events(status, created_at);

-- Statement jobs (async PDF processing tracking) with pipeline progress columns
CREATE TABLE statement_jobs (
    id VARCHAR2(36) PRIMARY KEY,
    user_id NUMBER NOT NULL REFERENCES users(id),
    original_filename VARCHAR2(255) NOT NULL,
    status VARCHAR2(16) NOT NULL,
    error_message CLOB NULL,
    created_at TIMESTAMP NOT NULL,
    started_at TIMESTAMP NULL,
    finished_at TIMESTAMP NULL,
    page_count NUMBER NULL,
    progress_percent NUMBER NULL,
    total_pages NUMBER NULL,
    processed_pages NUMBER NULL,
    total_chunks NUMBER NULL,
    processed_chunks NUMBER NULL,
    error_count NUMBER NULL,
    execution_arn VARCHAR2(200) NULL
);
CREATE INDEX idx_statement_jobs_user_created ON statement_jobs(user_id, created_at DESC);
CREATE INDEX idx_statement_jobs_status ON statement_jobs(status);
